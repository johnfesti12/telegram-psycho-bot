import os
import logging
import sqlite3
from datetime import datetime, timedelta
from yookassa import Configuration, Payment
from yookassa.domain.notification import WebhookNotification
import uuid

logger = logging.getLogger(__name__)

class PaymentHandler:
    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.sub_manager = bot_instance.sub_manager
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
        shop_id = os.getenv('YOOKASSA_SHOP_ID')
        secret_key = os.getenv('YOOKASSA_SECRET_KEY')
        
        if not shop_id or not secret_key:
            print("‚ùå –í–ù–ò–ú–ê–ù–ò–ï: YOOKASSA_SHOP_ID –∏–ª–∏ YOOKASSA_SECRET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
            print("   –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /add_premium")
            return
        
        # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
        try:
            Configuration.configure(shop_id, secret_key)
            print("‚úÖ –ÆKassa Configuration –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ÆKassa: {e}")
            return
        
        self.tariff_plans = {
            'premium_month': {
                'name': 'Premium (1 –º–µ—Å—è—Ü)',
                'price': 139.00,
                'days': 30,
                'description': 'üíé –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å AI-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º'
            },
            'premium_year': {
                'name': 'Premium (1 –≥–æ–¥)',
                'price': 990.00,
                'days': 365,
                'description': 'üíé –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ + —ç–∫–æ–Ω–æ–º–∏—è 20%'
            }
        }
        
        print("‚úÖ PaymentHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def create_payment(self, user_id, tariff_type):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa"""
        try:
                if tariff_type not in self.tariff_plans:
                    return None, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–∞—Ä–∏—Ñ–∞"
                
                tariff = self.tariff_plans[tariff_type]
                
                # ID –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                payment_id = str(uuid.uuid4())

                bot_username = "@your_sweet_PsychoBot"
                
                # –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
                description = f"{tariff['name']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
                
                # –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
                if not os.getenv('YOOKASSA_SHOP_ID'):
                    print("üîµ DEBUG: –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–ª–∞—Ç–µ–∂")
                    return self._create_demo_payment(user_id, tariff_type, payment_id)
                
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
                payment = Payment.create({
                    "amount": {
                        "value": f"{tariff['price']:.2f}",
                        "currency": "RUB"
                    },
                    "confirmation": {
                        "type": "redirect",
                        "return_url": f"https://t.me/your_sweet_PsychoBot"
                    },
                    "capture": True,
                    "description": description,
                    "metadata": {
                        "user_id": user_id,
                        "tariff_type": tariff_type,
                        "days": tariff['days'],
                        "bot_payment_id": payment_id
                    },
                    "receipt": {
                        "customer": {
                            "email": f"user{user_id}@telegram.org"
                        },
                        "items": [
                            {
                                "description": tariff['description'],
                                "quantity": "1",
                                "amount": {
                                    "value": f"{tariff['price']:.2f}",
                                    "currency": "RUB"
                                },
                                "vat_code": "1",
                                "payment_mode": "full_payment",
                                "payment_subject": "service"
                            }
                        ]
                    }
                })
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
                self._save_payment_info(
                    user_id=user_id,
                    payment_id=payment.id,
                    tariff_type=tariff_type,
                    amount=tariff['price'],
                    status=payment.status,
                    yookassa_payment_id=payment.id
                )
                
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ {payment.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return payment, None



            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return None, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}"

    def _create_demo_payment(self, user_id, tariff_type, payment_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        tariff = self.tariff_plans[tariff_type]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–º–æ-–ø–ª–∞—Ç–µ–∂
        self._save_payment_info(
            user_id=user_id,
            payment_id=payment_id,
            tariff_type=tariff_type,
            amount=tariff['price'],
            status='pending',
            yookassa_payment_id=f"demo_{payment_id}"
        )
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –ø–ª–∞—Ç–µ–∂–∞
        class DemoPayment:
            def __init__(self):
                self.id = payment_id
                self.status = 'pending'
                self.confirmation = type('obj', (object,), {
                    'confirmation_url': f"https://yookassa.ru/demo/payment/{payment_id}"
                })
        
        print(f"üîµ DEBUG: –°–æ–∑–¥–∞–Ω –¥–µ–º–æ-–ø–ª–∞—Ç–µ–∂ {payment_id}")
        return DemoPayment(), None

    def _save_payment_info(self, user_id, payment_id, tariff_type, amount, status, yookassa_payment_id=None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î"""
        try:
            cursor = self.sub_manager.conn.cursor()
            cursor.execute('''
                INSERT INTO payments 
                (user_id, payment_id, tariff_type, amount, status, yookassa_payment_id, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (user_id, payment_id, tariff_type, amount, status, yookassa_payment_id, datetime.now()))
            
            self.sub_manager.conn.commit()
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–ª–∞—Ç–µ–∂ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–¥–∏–º –µ—ë
            if "no such table" in str(e) or "no such column" in str(e):
                print("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É payments...")
                self.sub_manager.create_tables()
                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
                cursor.execute('''
                    INSERT INTO payments 
                    (user_id, payment_id, tariff_type, amount, status, yookassa_payment_id, created_at)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (user_id, payment_id, tariff_type, amount, status, yookassa_payment_id, datetime.now()))
                self.sub_manager.conn.commit()

    def process_webhook(self, webhook_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç –ÆKassa"""
        try:
            print(f"üîî –í–µ–±—Ö—É–∫ –ø–æ–ª—É—á–µ–Ω: {webhook_data}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
            event = webhook_data.get('event')
            payment_object = webhook_data.get('object', {})
            payment_id = payment_object.get('id')
            status = payment_object.get('status')
            
            print(f"üìä –°–æ–±—ã—Ç–∏–µ: {event}, –ü–ª–∞—Ç–µ–∂: {payment_id}, –°—Ç–∞—Ç—É—Å: {status}")
            
            if event == 'payment.succeeded' and status == 'succeeded':
                # –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –Ω–∞—à–µ–π –ë–î –ø–æ ID –ÆKassa
                payment_info = self._get_payment_by_yookassa_id(payment_id)
                
                if payment_info:
                    user_id = payment_info['user_id']
                    tariff_type = payment_info['tariff_type']
                    days = self.tariff_plans[tariff_type]['days']
                    
                    print(f"üéØ –ù–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–∞—Ä–∏—Ñ: {tariff_type}")
                    
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                    success = self.activate_premium_subscription(user_id, days)
                    if success:
                        self.send_payment_success_message(user_id, tariff_type, days)
                        self._update_payment_status(payment_info['payment_id'], 'succeeded')
                        print(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}")
                else:
                    print(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    
            elif event == 'payment.waiting_for_capture':
                print(f"‚è≥ –ü–ª–∞—Ç–µ–∂ {payment_id} –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                
            elif event == 'payment.canceled':
                print(f"‚ùå –ü–ª–∞—Ç–µ–∂ {payment_id} –æ—Ç–º–µ–Ω–µ–Ω")
                payment_info = self._get_payment_by_yookassa_id(payment_id)
                if payment_info:
                    self._update_payment_status(payment_info['payment_id'], 'canceled')
            
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
            import traceback
            print(f"‚ùå –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {traceback.format_exc()}")
            return False
        
    def _get_payment_by_yookassa_id(self, yookassa_payment_id):
        """–ü–æ–∏—Å–∫ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ ID –ÆKassa"""
        try:
            cursor = self.sub_manager.conn.cursor()
            cursor.execute('''
                SELECT user_id, payment_id, tariff_type, status 
                FROM payments 
                WHERE yookassa_payment_id = ? OR payment_id = ?
            ''', (yookassa_payment_id, yookassa_payment_id))
            
            result = cursor.fetchone()
            if result:
                return {
                    'user_id': result[0],
                    'payment_id': result[1],
                    'tariff_type': result[2],
                    'status': result[3]
                }
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return None

    def _update_payment_status(self, payment_id, status):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î"""
        try:
            cursor = self.sub_manager.conn.cursor()
            cursor.execute('''
                UPDATE payments SET status = ?, updated_at = ? 
                WHERE payment_id = ? OR yookassa_payment_id = ?
            ''', (status, datetime.now(), payment_id, payment_id))
            self.sub_manager.conn.commit()
            print(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –Ω–∞ {status}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")

    def activate_premium_subscription(self, user_id, days):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
        try:
            return self.sub_manager.add_premium_user(user_id, days)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False

    def send_payment_success_message(self, user_id, tariff_type, days):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
        try:
            tariff = self.tariff_plans.get(tariff_type, {})
            message = f"""üéâ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>

üíé <b>–í–∞—à Premium –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>

üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {days} –¥–Ω–µ–π
üí∞ –¢–∞—Ä–∏—Ñ: {tariff.get('name', 'Premium')}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: ‚ôæÔ∏è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ

–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ:
‚Ä¢ ‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å AI
‚Ä¢ üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤  
‚Ä¢ üìö –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
‚Ä¢ üéØ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! ‚ù§Ô∏è

–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
            
            self.bot.send_message(user_id, message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ: {e}")

    def send_payment_failed_message(self, user_id, status):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
        try:
            if status == 'canceled':
                message = """‚ùå <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω</b>

–ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ –æ—à–∏–±–∫–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞.

–î–ª—è –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: @danil_skopov"""
            else:
                message = """‚è≥ <b>–ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>

–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω."""
            
            self.bot.send_message(user_id, message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ—É–¥–∞—á–µ: {e}")

    def check_payment_status(self, payment_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —Å –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {payment_id}")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –Ω–∞—à–µ–π –ë–î
            cursor = self.sub_manager.conn.cursor()
            cursor.execute("""
                SELECT user_id, tariff_type, status 
                FROM payments 
                WHERE payment_id = ? OR yookassa_payment_id = ?
            """, (payment_id, payment_id))
            
            payment_info = cursor.fetchone()
            
            if not payment_info:
                print(f"‚ùå –ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return 'not_found'
            
            user_id, tariff_type, current_status = payment_info
            
            # –ï—Å–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å
            if current_status == 'succeeded':
                return 'succeeded'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ÆKassa
            if not os.getenv('YOOKASSA_SHOP_ID'):
                print("üîµ –î–µ–º–æ-—Ä–µ–∂–∏–º: –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂")
                # –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                days = self.tariff_plans[tariff_type]['days']
                if self.activate_premium_subscription(user_id, days):
                    self.send_payment_success_message(user_id, tariff_type, days)
                    self._update_payment_status(payment_id, 'succeeded')
                    return 'succeeded'
                return 'pending'
            
            # –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API –ÆKassa
            try:
                payment = Payment.find_one(payment_id)
                status = payment.status
                
                print(f"üîç –°—Ç–∞—Ç—É—Å –æ—Ç –ÆKassa: {status}")
                
                if status == 'succeeded':
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                    days = self.tariff_plans[tariff_type]['days']
                    if self.activate_premium_subscription(user_id, days):
                        self.send_payment_success_message(user_id, tariff_type, days)
                        self._update_payment_status(payment_id, 'succeeded')
                        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                return status
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ API –ÆKassa: {e}")
                return 'error'
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return 'error'
    
    def check_and_activate_payments(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏"""
        try:
            cursor = self.sub_manager.conn.cursor()
            
            # –ò—â–µ–º pending –ø–ª–∞—Ç–µ–∂–∏
            cursor.execute("""
                SELECT payment_id, user_id, tariff_type, yookassa_payment_id 
                FROM payments 
                WHERE status = 'pending'
            """)
            pending_payments = cursor.fetchall()
            
            activated_count = 0
            
            for payment_id, user_id, tariff_type, yookassa_id in pending_payments:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ÆKassa
                status, payment = self.check_payment_status(yookassa_id or payment_id)
                
                if status == 'succeeded':
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                    days = self.tariff_plans[tariff_type]['days']
                    if self.activate_premium_subscription(user_id, days):
                        self.send_payment_success_message(user_id, tariff_type, days)
                        self._update_payment_status(payment_id, 'succeeded')
                        activated_count += 1
                        print(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                elif status in ['canceled', 'failed']:
                    self._update_payment_status(payment_id, status)
            
            if activated_count > 0:
                print(f"üéâ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {activated_count} –ø–æ–¥–ø–∏—Å–æ–∫")
                
            return activated_count
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            return 0

    def setup_webhook(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –≤ –ÆKassa"""
        try:
            print("üîß –ù–∞—á–∏–Ω–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤–µ–±—Ö—É–∫–æ–≤...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
            shop_id = os.getenv('YOOKASSA_SHOP_ID')
            secret_key = os.getenv('YOOKASSA_SECRET_KEY')
            
            print(f"üîë Shop ID: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if shop_id else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
            print(f"üîë Secret Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if secret_key else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
            
            if not shop_id or not secret_key:
                print("‚ùå –ö–ª—é—á–∏ API –ÆKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–µ–±—Ö—É–∫-—Å–µ—Ä–≤–µ—Ä–∞
            try:
                import requests
                response = requests.get("https://yookassa-webhook-gstx.onrender.com/health", timeout=10)
                print(f"üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –∫–æ–¥ {response.status_code}")
                if response.status_code != 200:
                    print("‚ùå –í–µ–±—Ö—É–∫-—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    return False
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
                return False
            
            # URL –≤–∞—à–µ–≥–æ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ Render
            webhook_url = "https://yookassa-webhook-gstx.onrender.com/webhook/yookassa"
            print(f"üîó Webhook URL: {webhook_url}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Webhook —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            from yookassa import Webhook
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –≤–µ–±—Ö—É–∫–æ–≤
                print("üìã –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –≤–µ–±—Ö—É–∫–æ–≤...")
                webhooks = Webhook.list()
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ –≤–µ–±—Ö—É–∫–æ–≤: {len(webhooks.items)}")
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ–±—Ö—É–∫–∏ –Ω–∞ —Ç–æ—Ç –∂–µ URL
                for webhook in webhooks.items:
                    if webhook.url == webhook_url:
                        try:
                            print(f"üóëÔ∏è –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫: {webhook.id}")
                            Webhook.remove(webhook.id)
                            print(f"‚úÖ –í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω: {webhook.id}")
                        except Exception as e:
                            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ {webhook.id}: {e}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–µ–±—Ö—É–∫–æ–≤: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –¥–æ–±–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ –¥–∞–∂–µ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø–æ–ª—É—á–µ–Ω
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
            try:
                print("‚ûï –î–æ–±–∞–≤–ª—è—é –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫...")
                webhook = Webhook.add({
                    "event": "payment.succeeded",
                    "url": webhook_url
                })
                
                print("‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                print(f"üîó URL: {webhook.url}")
                print(f"üéØ –°–æ–±—ã—Ç–∏–µ: {webhook.event}")
                print(f"üÜî ID: {webhook.id}")
                
                return True
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞: {e}")
                import traceback
                print(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
                return False
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
            import traceback
            print(f"üîç –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
            return False

    def get_payment_url(self, payment):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
        if hasattr(payment, 'confirmation') and hasattr(payment.confirmation, 'confirmation_url'):
            return payment.confirmation.confirmation_url
        return None