import sqlite3
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

class SubscriptionManager:
    def __init__(self, db_path='psychology_bot.db'):
        self.db_path = db_path
        self.conn = sqlite3.connect(db_path)  # –î–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É!
        self.create_tables()
        print("‚úÖ Database manager initialized")

    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        cursor = self.conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS subscriptions (
                user_id INTEGER PRIMARY KEY,
                subscription_type TEXT NOT NULL DEFAULT 'free',
                expiry_date TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–ê–ë–õ–ò–¶–ê –î–õ–Ø –ò–°–¢–û–†–ò–ò –î–ò–ê–õ–û–ì–ê
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS chat_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            role TEXT NOT NULL,
            content TEXT NOT NULL,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        
        # –¢–ê–ë–õ–ò–¶–ê –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS message_stats (
            user_id INTEGER,
            date TEXT,
            message_count INTEGER DEFAULT 0,
            PRIMARY KEY (user_id, date)
        )
        ''')
        
        # –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –î–õ–Ø –ü–õ–ê–¢–ï–ñ–ï–ô
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS payments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            payment_id TEXT UNIQUE,
            yookassa_payment_id TEXT,
            tariff_type TEXT,
            amount REAL,
            status TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES subscriptions(user_id)
        )
        ''')
        
        # –¢–ê–ë–õ–ò–¶–ê USERS (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            subscription_type TEXT DEFAULT 'free',
            subscription_end DATETIME,
            messages_today INTEGER DEFAULT 0,
            last_message_date DATE,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        
        self.conn.commit()
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        conn = sqlite3.connect('psychology_bot.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                subscription_type TEXT DEFAULT 'trial',
                subscription_end DATETIME,
                messages_today INTEGER DEFAULT 0,
                last_message_date DATE,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                amount REAL,
                status TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def get_user_status(self, user_id, username="", first_name=""):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect('psychology_bot.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        
        if not user:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 7 –¥–Ω–µ–π
            trial_end = datetime.now() + timedelta(days=7)
            cursor.execute('''
                INSERT INTO users (user_id, username, first_name, subscription_type, subscription_end)
                VALUES (?, ?, ?, 'trial', ?)
            ''', (user_id, username, first_name, trial_end))
            conn.commit()
            conn.close()
            return 'trial', trial_end, 0, 7
        
        conn.close()
        
        sub_type = user[3]
        sub_end = datetime.fromisoformat(user[4]) if user[4] else None
        messages_today = user[5] or 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
        if sub_end and datetime.now() > sub_end:
            sub_type = 'free'
            days_left = 0
        else:
            days_left = (sub_end - datetime.now()).days if sub_end else 0
        
        return sub_type, sub_end, messages_today, days_left
    
    def can_send_message(self, user_id, is_menu_action=None):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    
        import traceback
        print(f"üîµ DEBUG can_send_message –≤—ã–∑–≤–∞–Ω:")
        print(f"   user_id={user_id}, is_menu_action={is_menu_action}")
        print(f"   –í—ã–∑–≤–∞–Ω–æ –∏–∑:")
        for line in traceback.format_stack()[-3:-1]:
            print(f"   {line.strip()}")
        
        # –ê–î–ú–ò–ù–´ –í–°–ï–ì–î–ê –ú–û–ì–£–¢ –û–¢–ü–†–ê–í–õ–Ø–¢–¨ –°–û–û–ë–©–ï–ù–ò–Ø
        ADMIN_IDS = [309524694] #309524694
        if user_id in ADMIN_IDS:
            print(f"üîµ DEBUG: –ê–¥–º–∏–Ω {user_id} - –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø")
            return True, 0, float('inf'), 'premium', 365
        
        try:
            cursor = self.conn.cursor()
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
            cursor.execute("SELECT subscription_type, expiry_date FROM subscriptions WHERE user_id = ?", (user_id,))
            result = cursor.fetchone()
            
            if result:
                sub_type, expiry_date = result
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞                
                if expiry_date and datetime.now() > datetime.fromisoformat(expiry_date):
                    print(f"üîµ DEBUG: –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞! –ü–æ–Ω–∏–∂–∞–µ–º –¥–æ free")
                    sub_type = 'free'
                    cursor.execute(
                        "UPDATE subscriptions SET subscription_type = 'free' WHERE user_id = ?",
                        (user_id,)
                    )
                    self.conn.commit()
            else:
                print(f"üîµ DEBUG: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–æ–∑–¥–∞–µ–º free –∑–∞–ø–∏—Å—å")
                sub_type = 'free'
                cursor.execute(
                    "INSERT INTO subscriptions (user_id, subscription_type) VALUES (?, 'free')",
                    (user_id,)
                )
                self.conn.commit()
            
            # 2. –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω           
            daily_limit = 5 if sub_type != 'premium' else float('inf')
            
            # 3. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().strftime('%Y-%m-%d')
            cursor.execute(
                "SELECT message_count FROM message_stats WHERE user_id = ? AND date = ?", 
                (user_id, today)
            )
            result = cursor.fetchone()
            messages_today = result[0] if result else 0
            
            print(f"üîµ DEBUG: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–æ–¥–ø–∏—Å–∫–∞: {sub_type}, —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {messages_today}, –ª–∏–º–∏—Ç: {daily_limit}")
            
            # 4. –ï–°–õ–ò –≠–¢–û –ú–ï–ù–Æ –î–ï–ô–°–¢–í–ò–ï - –ù–ï –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –°–ß–ï–¢–ß–ò–ö
            if is_menu_action:
                print(f"üîµ DEBUG: –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–µ - –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫")
                can_send = True
                messages_display = messages_today  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            else:
                # –†–ï–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                can_send = messages_today < daily_limit if daily_limit != float('inf') else True
                
                if can_send:
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    if result:
                        cursor.execute(
                            "UPDATE message_stats SET message_count = message_count + 1 WHERE user_id = ? AND date = ?",
                            (user_id, today)
                        )
                    else:
                        cursor.execute(
                            "INSERT INTO message_stats (user_id, date, message_count) VALUES (?, ?, 1)",
                            (user_id, today)
                        )
                    self.conn.commit()
                    messages_display = messages_today + 1
                    print(f"üîµ DEBUG: –†–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —É–≤–µ–ª–∏—á–∏–ª–∏ —Å—á–µ—Ç—á–∏–∫ –¥–æ {messages_display}")
                else:
                    messages_display = messages_today
                    print(f"üîµ DEBUG: –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω - {messages_today}/{daily_limit}")
            
            # 5. –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏
            days_left = 0
            if sub_type == 'premium' and expiry_date:
                days_left = max(0, (datetime.fromisoformat(expiry_date) - datetime.now()).days)
            
            print(f"üîµ DEBUG: –ò—Ç–æ–≥ - –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {can_send}, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º: {messages_display}/{daily_limit}")
            
            return can_send, messages_display, daily_limit, sub_type, days_left
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ can_send_message: {e}")
            import traceback
            print(f"‚ùå –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {traceback.format_exc()}")
            return True, 0, float('inf'), 'premium', 365
    
    def upgrade_subscription(self, user_id, sub_type='premium', days=30):
        """–ê–ø–≥—Ä–µ–π–¥ –ø–æ–¥–ø–∏—Å–∫–∏"""
        sub_end = datetime.now() + timedelta(days=days)
        
        conn = sqlite3.connect('psychology_bot.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            UPDATE users 
            SET subscription_type = ?, subscription_end = ?
            WHERE user_id = ?
        ''', (sub_type, sub_end, user_id))
        
        conn.commit()
        conn.close()
        return True
    
    def debug_user_status(self, user_id):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            cursor = self.conn.cursor()
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            cursor.execute("SELECT * FROM subscriptions WHERE user_id = ?", (user_id,))
            subscription = cursor.fetchone()
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor.execute("SELECT * FROM message_stats WHERE user_id = ? AND date = date('now')", (user_id,))
            stats = cursor.fetchone()
        
            print(f"üîç DEBUG USER {user_id}:")
            print(f"   üìã –ü–æ–¥–ø–∏—Å–∫–∞: {subscription}")
            print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
            return subscription, stats
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")
            return None, None
        
    def save_message(self, user_id, role, content):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            cursor = self.conn.cursor()
            cursor.execute(
            "INSERT INTO chat_history (user_id, role, content) VALUES (?, ?, ?)",
            (user_id, role, content)
            )
            self.conn.commit()
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return False

    def get_chat_history(self, user_id, limit=6):
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π)"""
        try:
            cursor = self.conn.cursor()
            cursor.execute(
            "SELECT role, content FROM chat_history WHERE user_id = ? ORDER BY timestamp DESC LIMIT ?",
            (user_id, limit)
            )
            history = cursor.fetchall()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
            return list(reversed(history))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return []

    def clear_chat_history(self, user_id):

        """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"""
        try:
            cursor = self.conn.cursor()
            cursor.execute("DELETE FROM chat_history WHERE user_id = ?", (user_id,))
            self.conn.commit()
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return False    
        
    def remove_premium(self, user_id):
        """–ò—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–º–∏—É–º–∞"""
        try:
            cursor = self.conn.cursor()
            print(f"üîµ DEBUG: –£–¥–∞–ª—è–µ–º –ø—Ä–µ–º–∏—É–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –û–ë–ù–û–í–õ–Ø–ï–ú –û–ë–ï –¢–ê–ë–õ–ò–¶–´ –ê–¢–û–ú–ê–†–ù–û
            cursor.execute(
                "UPDATE subscriptions SET subscription_type = 'free', expiry_date = NULL WHERE user_id = ?",
                (user_id,)
            )
            sub_updated = cursor.rowcount
            print(f"üîµ DEBUG: –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ subscriptions: {sub_updated}")
            
            cursor.execute(
                "UPDATE users SET subscription_type = 'free', subscription_end = NULL WHERE user_id = ?",
                (user_id,)
            )
            users_updated = cursor.rowcount
            print(f"üîµ DEBUG: –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ users: {users_updated}")
            
            self.conn.commit()
            
            # –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢
            cursor.execute("SELECT subscription_type FROM subscriptions WHERE user_id = ?", (user_id,))
            final_sub = cursor.fetchone()
            cursor.execute("SELECT subscription_type FROM users WHERE user_id = ?", (user_id,))
            final_user = cursor.fetchone()
            
            print(f"üîµ DEBUG: –ò—Ç–æ–≥ - subscriptions: {final_sub}, users: {final_user}")
            
            if sub_updated > 0 or users_updated > 0:
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –ø—Ä–µ–º–∏—É–º–∞")
                return True
            else:
                print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –Ω–µ –ø—Ä–µ–º–∏—É–º")
                return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–º–∏—É–º–∞: {e}")
            import traceback
            print(f"‚ùå –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {traceback.format_exc()}")
            return False

    def add_premium_user(self, user_id, days=30):
        """–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–µ–º–∏—É–º"""
        try:
            cursor = self.conn.cursor()
            expiry_date = datetime.now() + timedelta(days=days)
            
            # –ü–†–û–í–ï–†–Ø–ï–ú –°–£–©–ï–°–¢–í–£–ï–¢ –õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨
            cursor.execute("SELECT user_id FROM subscriptions WHERE user_id = ?", (user_id,))
            existing_user = cursor.fetchone()
            
            if existing_user:
                # –û–ë–ù–û–í–õ–Ø–ï–ú —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                cursor.execute(
                    "UPDATE subscriptions SET subscription_type = ?, expiry_date = ? WHERE user_id = ?",
                    ('premium', expiry_date, user_id)
                )
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ–º–∏—É–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {days} –¥–Ω–µ–π")
            else:
                # –°–û–ó–î–ê–ï–ú –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                cursor.execute(
                    "INSERT INTO subscriptions (user_id, subscription_type, expiry_date) VALUES (?, ?, ?)",
                    (user_id, 'premium', expiry_date)
                )
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–µ–º–∏—É–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {days} –¥–Ω–µ–π")
            
            # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É users –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
            existing_in_users = cursor.fetchone()
            
            if existing_in_users:
                cursor.execute(
                    "UPDATE users SET subscription_type = ?, subscription_end = ? WHERE user_id = ?",
                    ('premium', expiry_date, user_id)
                )
            else:
                cursor.execute(
                    "INSERT INTO users (user_id, subscription_type, subscription_end) VALUES (?, ?, ?)",
                    (user_id, 'premium', expiry_date)
                )
            
            self.conn.commit()
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ premium –Ω–∞ {days} –¥–Ω–µ–π")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ premium: {e}")
            import traceback
            print(f"üîç –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
            return False              

    def get_all_users_info(self):        
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã subscriptions)"""
        try:
            cursor = self.conn.cursor()

            cursor.execute('''
                SELECT 
                    s.user_id, 
                    u.username,
                    s.subscription_type,
                    s.expiry_date
                FROM subscriptions s
                LEFT JOIN users u ON s.user_id = u.user_id
                ORDER BY 
                    CASE 
                        WHEN s.subscription_type = 'premium' THEN 1
                        WHEN s.subscription_type = 'trial' THEN 2
                        ELSE 3
                    END,
                    s.user_id
            ''')

            users = cursor.fetchall()
            result = []

            for user in users:
                user_id, username, sub_type, expiry_date = user

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
                if sub_type == 'premium':
                    if expiry_date:
                        try:
                            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
                            expiry_date_obj = datetime.fromisoformat(expiry_date) if isinstance(expiry_date, str) else expiry_date
                            days_left = max(0, (expiry_date_obj - datetime.now()).days)
                            sub_info = f"üíé Premium ({days_left}–¥)"
                        except:
                            sub_info = f"üíé Premium (–æ—à–∏–±–∫–∞ –¥–∞—Ç—ã)"
                    else:
                        sub_info = "üíé Premium (‚àû)"
                
                elif sub_type == 'trial':
                    if expiry_date:
                        try:
                            expiry_date_obj = datetime.fromisoformat(expiry_date) if isinstance(expiry_date, str) else expiry_date
                            days_left = max(0, (expiry_date_obj - datetime.now()).days)
                            sub_info = f"üÜì Trial ({days_left}–¥)"
                        except:
                            sub_info = f"üÜì Trial (–æ—à–∏–±–∫–∞ –¥–∞—Ç—ã)"
                    else:
                        sub_info = "üÜì Trial"
                
                else:  # free
                    # –î–ª—è free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
                    today = datetime.now().strftime('%Y-%m-%d')
                    cursor.execute(
                        "SELECT message_count FROM message_stats WHERE user_id = ? AND date = ?", 
                        (user_id, today)
                    )
                    stats_result = cursor.fetchone()
                    messages_today = stats_result[0] if stats_result else 0
                    remaining_messages = max(0, 5 - messages_today)
                    sub_info = f"üÜì Free ({remaining_messages} –æ—Å—Ç.)"

                result.append({
                    'user_id': user_id,
                    'username': username or "N/A",
                    'subscription_info': sub_info
                })

            return result

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            import traceback
            print(f"‚ùå –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {traceback.format_exc()}")
            return []
    
    def get_detailed_user_info(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        try:
            cursor = self.conn.cursor()
        
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ subscriptions (–æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫)
            cursor.execute('''
                SELECT 
                    s.subscription_type,
                    s.expiry_date,
                    u.username, 
                    u.first_name,
                    u.created_at,
                    u.messages_today,
                    u.last_message_date
                FROM subscriptions s
                LEFT JOIN users u ON s.user_id = u.user_id
                WHERE s.user_id = ?
            ''', (user_id,))
            user_data = cursor.fetchone()
        
            if not user_data:
                return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
            sub_type, expiry_date, username, first_name, created_at, messages_today, last_message_date = user_data
        
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().strftime('%Y-%m-%d')
            cursor.execute(
                "SELECT message_count FROM message_stats WHERE user_id = ? AND date = ?", 
                (user_id, today)
            )
            stats_result = cursor.fetchone()
            messages_today_count = stats_result[0] if stats_result else 0
        
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor.execute("SELECT COUNT(*) FROM chat_history WHERE user_id = ?", (user_id,))
            total_messages = cursor.fetchone()[0]
        
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π
            cursor.execute("SELECT COUNT(DISTINCT date) FROM message_stats WHERE user_id = ?", (user_id,))
            active_days = cursor.fetchone()[0]
        
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ subscriptions!)
            if sub_type == 'premium':
                if expiry_date:
                    try:
                        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
                        expiry_date_obj = datetime.fromisoformat(expiry_date) if isinstance(expiry_date, str) else expiry_date
                        days_left = max(0, (expiry_date_obj - datetime.now()).days)
                        sub_info = f"üíé Premium (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π)"
                    except:
                        sub_info = f"üíé Premium (–æ—à–∏–±–∫–∞ –¥–∞—Ç—ã: {expiry_date})"
                else:
                    sub_info = "üíé Premium (–±–µ—Å—Å—Ä–æ—á–Ω–æ)"
            elif sub_type == 'trial':
                if expiry_date:
                    try:
                        expiry_date_obj = datetime.fromisoformat(expiry_date) if isinstance(expiry_date, str) else expiry_date
                        days_left = max(0, (expiry_date_obj - datetime.now()).days)
                        sub_info = f"üÜì Trial (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π)"
                    except:
                        sub_info = f"üÜì Trial (–æ—à–∏–±–∫–∞ –¥–∞—Ç—ã: {expiry_date})"
                else:
                    sub_info = "üÜì Trial"
            else:
                remaining_messages = max(0, 5 - messages_today_count)
                sub_info = f"üÜì Free ({remaining_messages} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å)"
        
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
            def safe_date_format(date_value, default="N/A"):
                if not date_value:
                    return default
                try:
                    if isinstance(date_value, str):
                        date_obj = datetime.fromisoformat(date_value)
                    else:
                        date_obj = date_value
                    return date_obj.strftime('%d.%m.%Y %H:%M')
                except:
                    return str(date_value)
        
            def safe_date_only(date_value, default="N/A"):
                if not date_value:
                    return default
                try:
                    if isinstance(date_value, str):
                        date_obj = datetime.fromisoformat(date_value)
                    else:
                        date_obj = date_value
                    return date_obj.strftime('%d.%m.%Y')
                except:
                    return str(date_value)
        
            created_str = safe_date_format(created_at, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            last_active = safe_date_only(last_message_date, "–ù–∏–∫–æ–≥–¥–∞")
            sub_end_str = safe_date_only(expiry_date, "–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ")
        
            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            info_text = f"""
    üë§ <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>

    üÜî <b>User ID:</b> <code>{user_id}</code>
    üë§ <b>–ò–º—è:</b> {first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
    üîó <b>Username:</b> @{username or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

    üíé <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {sub_info}
    üìÖ <b>–ò—Å—Ç–µ–∫–∞–µ—Ç:</b> {sub_end_str}

    üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:</b>
    ‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {messages_today_count}/5
    ‚Ä¢ –í—Å–µ–≥–æ: {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π
    ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: {active_days}

    üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {created_str}
    üïí <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {last_active}
    
    """
            return info_text
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
            import traceback
            print(f"‚ùå –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {traceback.format_exc()}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}"
        
    def get_users_count_by_type(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∏–ø–∞–º –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            cursor = self.conn.cursor()

            cursor.execute('''
                SELECT 
                    subscription_type,
                    COUNT(*) as count
                FROM subscriptions 
                GROUP BY subscription_type
            ''')

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã
            result = {
                'premium': 0,
                'trial': 0, 
                'free': 0
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ –ë–î
            for row in cursor.fetchall():
                sub_type = row[0]
                if sub_type in result:
                    result[sub_type] = row[1]

            return result

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            return {'premium': 0, 'trial': 0, 'free': 0}

    def reset_message_count(self, user_id, date=None):
        """–û–±–Ω—É–ª–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            cursor = self.conn.cursor()
            
            if date is None:
                date = datetime.now().strftime('%Y-%m-%d')
            
            cursor.execute(
                "DELETE FROM message_stats WHERE user_id = ? AND date = ?",
                (user_id, date)
            )
            
            # –¢–∞–∫–∂–µ –æ–±–Ω—É–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ users (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
            cursor.execute(
                "UPDATE users SET messages_today = 0, last_message_date = ? WHERE user_id = ?",
                (date, user_id)
            )
            
            self.conn.commit()
            print(f"‚úÖ –°—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω—É–ª–µ–Ω –∑–∞ {date}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω—É–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: {e}")
            return False  

    def get_or_create_user(self, user_id, username="", first_name=""):
        """–°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users"""
        try:
            cursor = self.conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
            user = cursor.fetchone()
            
            if not user:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                cursor.execute('''
                    INSERT INTO users (user_id, username, first_name, subscription_type)
                    VALUES (?, ?, ?, 'free')
                ''', (user_id, username, first_name))
                
                # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ subscriptions –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                cursor.execute('''
                    INSERT INTO subscriptions (user_id, subscription_type)
                    VALUES (?, 'free')
                ''', (user_id,))
                
                self.conn.commit()
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
                return True
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º username –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
                if username or first_name:
                    cursor.execute('''
                        UPDATE users SET username = ?, first_name = ? WHERE user_id = ?
                    ''', (username, first_name, user_id))
                    self.conn.commit()
                    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

            return False
