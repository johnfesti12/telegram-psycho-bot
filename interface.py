from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime

class BotInterface:
    def __init__(self, subscription_manager):
        self.sub_manager = subscription_manager
    
    def get_main_menu(self, user_id, username="", first_name=""):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
        try:
            # –ù–ï –≤—ã–∑—ã–≤–∞–µ–º can_send_message –∑–¥–µ—Å—å - —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            cursor = self.sub_manager.conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞–ø—Ä—è–º—É—é
            cursor.execute("SELECT subscription_type, expiry_date FROM subscriptions WHERE user_id = ?", (user_id,))
            result = cursor.fetchone()
            
            if result:
                sub_type, expiry_date = result
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞                
                if expiry_date and datetime.now() > datetime.fromisoformat(expiry_date):
                    sub_type = 'free'
            else:
                sub_type = 'free'
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().strftime('%Y-%m-%d')
            cursor.execute(
                "SELECT message_count FROM message_stats WHERE user_id = ? AND date = ?", 
                (user_id, today)
            )
            result = cursor.fetchone()
            messages_today = result[0] if result else 0
            
            # –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
            if sub_type == 'premium':
                status_icon = "üíé"
                status_text = f"Premium –ø–æ–¥–ø–∏—Å–∫–∞"
                limit_text = f"‚àû —Å–æ–æ–±—â."
            else:
                status_icon = "üÜì"
                status_text = "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ"
                daily_limit = 5
                limit_text = f"{messages_today}/{daily_limit} —Å–æ–æ–±—â."

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –º–µ–Ω—é
            text = f"""üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!

    –Ø - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π AI-–ø—Å–∏—Ö–æ–ª–æ–≥. 

    <b>–¢–≤–æ–π —Å—Ç–∞—Ç—É—Å:</b>
    {status_icon} {status_text} ¬∑ {limit_text}

    –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:
    ‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Å–ª–æ–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç
    ‚Ä¢ –ù–∞–π—Ç–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–º–æ—Ü–∏—è–º–∏  
    ‚Ä¢ –ò–∑—É—á–∏—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–¥—Ö–æ–¥—ã –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥
    ‚Ä¢ –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ —à–∞–≥ –∑–∞ —à–∞–≥–æ–º

    <code>–û—Ç–ø—Ä–∞–≤–ª—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è:</code>
    üìÑ <a href="https://psychologybot.netlify.app/offer.html">–ü—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã</a>
    üîí <a href="https://psychologybot.netlify.app/privacy.html">–ü–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>

    –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–µ–π —Å–µ–±—è! üí´

    <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:</b>"""
        
            keyboard = [
                [InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è AI", callback_data="consult_ai")],                
                [InlineKeyboardButton("üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="subscription")],
                [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
                [InlineKeyboardButton("üÜò –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="help")]
            ]
        
            return text, InlineKeyboardMarkup(keyboard)
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_main_menu: {e}")
            # –ó–∞–≥–ª—É—à–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            error_text = f"""üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!

    –Ø - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π AI-–ø—Å–∏—Ö–æ–ª–æ–≥. 

    ‚ùå <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏</b>
    –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º!‚ö†Ô∏è

    <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:</b>"""
            
            keyboard = [
                [InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è AI", callback_data="consult_ai")],            
                [InlineKeyboardButton("üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="subscription")],
                [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
            ]
        
        return error_text, InlineKeyboardMarkup(keyboard)
    
    def get_payment_menu(self, user_id, tariff_type):
        """–ú–µ–Ω—é –æ–ø–ª–∞—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞"""
        tariff_plans = {
            'premium_month': {
                'name': 'Premium (1 –º–µ—Å—è—Ü)',
                'price': 139.00,
                'days': 30,
                'savings': ''
            },
            'premium_year': {
                'name': 'Premium (1 –≥–æ–¥)', 
                'price': 990.00,
                'days': 365,
                'savings': 'üí∞ SALE'
            }
        }
        
        tariff = tariff_plans.get(tariff_type, tariff_plans['premium_month'])
        
        text = f"""üíé <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ {tariff['name']}</b>

<b>–¢–∞—Ä–∏—Ñ:</b> {tariff['name']}
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {tariff['price']}‚ÇΩ
<b>–°—Ä–æ–∫:</b> {tariff['days']} –¥–Ω–µ–π
{tariff['savings']}

üéÅ <b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b>
‚Ä¢ ‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å AI-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º
‚Ä¢ üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤  
‚Ä¢ üìö –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
‚Ä¢ üéØ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ç–µ—Ö–Ω–∏–∫–∏

üí≥ <b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (Visa, MasterCard, –ú–ò–†)
‚Ä¢ –ÆMoney
‚Ä¢ –°–±–µ—Ä–±–∞–Ω–∫ –û–Ω–ª–∞–π–Ω
‚Ä¢ –¢–∏–Ω—å–∫–æ—Ñ—Ñ
‚Ä¢ QIWI

üîê <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
–í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞—â–∏—â–µ–Ω—ã –ÆKassa"""

        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π", callback_data=f"pay_{tariff_type}")],
            [InlineKeyboardButton("üìã –î—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã", callback_data=f"pay_methods_{tariff_type}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="subscription")]
        ]
    
        return text, InlineKeyboardMarkup(keyboard)

    def get_payment_methods_menu(self, user_id, tariff_type):
        """–ú–µ–Ω—é —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã"""
        tariff_plans = {
            'premium_month': {'name': 'Premium (1 –º–µ—Å—è—Ü)', 'price': 139},
            'premium_year': {'name': 'Premium (1 –≥–æ–¥)', 'price': 990}
        }
        
        tariff = tariff_plans.get(tariff_type)
        
        text = f"""üíé <b>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã</b>

<b>–¢–∞—Ä–∏—Ñ:</b> {tariff['name']}
<b>–°—É–º–º–∞:</b> {tariff['price']}‚ÇΩ

üì± <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:</b>

‚Ä¢ **–ÆMoney** (–∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ –∫–∞—Ä—Ç–∞)
‚Ä¢ **–°–±–µ—Ä–±–∞–Ω–∫ –û–Ω–ª–∞–π–Ω** (–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞)  
‚Ä¢ **–¢–∏–Ω—å–∫–æ—Ñ—Ñ** (–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–±–∞–Ω–∫)‚Ä¢ 
‚Ä¢ **–ú–æ–±–∏–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã** (–ú–¢–°)


üí° <b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:</b>
1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ–∫/—Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ @danilskopov
3. –ú—ã –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!"""

        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ)", callback_data=f"pay_{tariff_type}")],
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è –¥–ª—è –æ–ø–ª–∞—Ç—ã", url="https://t.me/danil_skopov")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"payment_{tariff_type}")]
        ]
    
        return text, InlineKeyboardMarkup(keyboard)

    def get_payment_success_menu(self, user_id, tariff_type, payment_id):
        """–ú–µ–Ω—é –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
        tariff_plans = {
            'premium_month': {'name': 'Premium (1 –º–µ—Å—è—Ü)', 'price': 139},
            'premium_year': {'name': 'Premium (1 –≥–æ–¥)', 'price': 990}
        }
        
        tariff = tariff_plans.get(tariff_type)
        
        text = f"""üíé <b>–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!</b>

<b>–¢–∞—Ä–∏—Ñ:</b> {tariff['name']}
<b>–°—É–º–º–∞:</b> {tariff['price']}‚ÇΩ
<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment_id}</code>

‚¨áÔ∏è <b>–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>

–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 –º–∏–Ω—É—Ç.

üí° <b>–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:</b>
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å" —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ @danil_skopov —Å ID –ø–ª–∞—Ç–µ–∂–∞"""

        keyboard = [
            [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", callback_data=f"process_payment_{payment_id}")],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_payment_{payment_id}")],
            [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/danil_skopov")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="subscription")]
        ]
    
        return text, InlineKeyboardMarkup(keyboard)

    def get_payment_status_menu(self, user_id, payment_id, status):
        """–ú–µ–Ω—é —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        status_texts = {
            'pending': "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
            'waiting_for_capture': "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", 
            'succeeded': "‚úÖ –û–ø–ª–∞—á–µ–Ω",
            'canceled': "‚ùå –û—Ç–º–µ–Ω–µ–Ω",
            'failed': "‚ùå –ù–µ —É–¥–∞–ª—Å—è"
        }
        
        status_text = status_texts.get(status, status)
        
        text = f"""üìä <b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞</b>

<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment_id}</code>
<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}

üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã" - –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É
‚Ä¢ –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" - –∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã
‚Ä¢ –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–û–ø–ª–∞—á–µ–Ω" - –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!
‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""

        keyboard = []
        
        if status in ['pending', 'waiting_for_capture']:
            keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_payment_{payment_id}")])
        
        keyboard.extend([
            [InlineKeyboardButton("üí≥ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="subscription")],
            [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/danilskopov")],
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
    
        return text, InlineKeyboardMarkup(keyboard)

    def get_payment_history_menu(self, user_id):
        """–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ –±–∞–∑—ã
            payments = getattr(self.sub_manager, 'get_payment_history', lambda x: [])(user_id)
            
            if not payments:
                text = """üìä <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π</b>

–£ –≤–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ –ø–ª–∞—Ç–µ–∂–µ–π.

üíé <b>–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?</b>
–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä–æ–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å AI-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º!"""
                
                keyboard = [
                    [InlineKeyboardButton("üíé –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="subscription")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription")]
                ]
            else:
                text = "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π</b>\n\n"
                
                for i, payment in enumerate(payments[-5:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–ª–∞—Ç–µ–∂–µ–π
                    status_icons = {
                        'succeeded': '‚úÖ',
                        'pending': '‚è≥', 
                        'canceled': '‚ùå',
                        'failed': '‚ùå'
                    }
                    
                    status_icon = status_icons.get(payment['status'], 'üìÑ')
                    text += f"{status_icon} {payment['tariff_type']} - {payment['amount']}‚ÇΩ - {payment['status']}\n"
                
                text += "\nüí° –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
                
                keyboard = [
                    [InlineKeyboardButton("üíé –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂", callback_data="subscription")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription")]
                ]
            
            return text, InlineKeyboardMarkup(keyboard)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            
            text = """üìä <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π</b>

‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π.

üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""
            
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription")]
            ]
            
            return text, InlineKeyboardMarkup(keyboard)

    def _get_subscription_text(self, sub_type, days_left):
        if sub_type == 'trial':
            return f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ({days_left} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å)"
        elif sub_type == 'premium':
            return "PREMIUM –ø–æ–¥–ø–∏—Å–∫–∞"
        else:
            return "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ"
    
    def get_stats_message(self, user_id):
        """–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
            cursor = self.sub_manager.conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
            cursor.execute("SELECT subscription_type, expiry_date FROM subscriptions WHERE user_id = ?", (user_id,))
            result = cursor.fetchone()
            
            if result:
                sub_type, expiry_date = result
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞                
                if expiry_date and datetime.now() > datetime.fromisoformat(expiry_date):
                    sub_type = 'free'
            else:
                sub_type = 'free'
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
            today = datetime.now().strftime('%Y-%m-%d')
            cursor.execute(
                "SELECT message_count FROM message_stats WHERE user_id = ? AND date = ?", 
                (user_id, today)
            )
            result = cursor.fetchone()
            messages_today = result[0] if result else 0
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            if sub_type == 'premium':
                sub_info = "–ü–æ–¥–ø–∏—Å–∫–∞: üíé Premium"
                # –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                if expiry_date:
                    days_left = max(0, (datetime.fromisoformat(expiry_date) - datetime.now()).days)
                    limit_info = f"üìÖ –î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {days_left}"
                else:
                    limit_info = "üìÖ –°—Ä–æ–∫: –±–µ—Å—Å—Ä–æ—á–Ω–æ"
                rec_text = "üéâ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
            else:
                daily_limit = 5
                sub_info = f"–ü–æ–¥–ø–∏—Å–∫–∞: üÜì {sub_type.capitalize()} —Ç–∞—Ä–∏—Ñ"
                limit_info = f"üì® –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {messages_today}/{daily_limit}"
                rec_text = "üí° –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ Premium –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!"
        
            text = f"""üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

    {sub_info}
    {limit_info}
        
    üÜî –¢–≤–æ–π ID: <code>{user_id}</code>

    {rec_text}"""
        
            return text, self.get_back_to_menu_button()
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_stats_message: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", self.get_back_to_menu_button()
    
    def get_back_to_menu_button(self):
        """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_main")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_help_message(self, user_id):
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞"""
        help_text = """üÜò <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>

ü§ù <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∏–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?</b>

üìß <b>–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º:</b>
‚Ä¢ Telegram: @danilskopov
‚Ä¢ Email: danil.skopov@gmail.com

üí¨ <b>–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º:</b>
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º
‚Ä¢ –û–ø–ª–∞—Ç–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è Premium –ø–æ–¥–ø–∏—Å–∫–∏  
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞
‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ

üìã <b>–ü–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º:</b>
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /myid - —É–∫–∞–∂–∏—Ç–µ –≤–∞—à ID
2. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ
3. –ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞

<b>–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å! ‚ù§Ô∏è</b>"""

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_main")]
        ])
        
        return help_text, keyboard

    def get_subscription_menu(self, user_id):
        """–ú–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
            cursor = self.sub_manager.conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
            cursor.execute("SELECT subscription_type, expiry_date FROM subscriptions WHERE user_id = ?", (user_id,))
            result = cursor.fetchone()
            
            if result:
                sub_type, expiry_date = result
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞                
                if expiry_date and datetime.now() > datetime.fromisoformat(expiry_date):
                    sub_type = 'free'
            else:
                sub_type = 'free'
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
            if sub_type == 'premium':
                if expiry_date:
                    days_left = max(0, (datetime.fromisoformat(expiry_date) - datetime.now()).days)
                    status_text = f"üíé Premium –ø–æ–¥–ø–∏—Å–∫–∞ ({days_left} –¥–Ω–µ–π)"
                else:
                    status_text = "üíé Premium –ø–æ–¥–ø–∏—Å–∫–∞"
            else:
                status_text = "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ"
        
            keyboard = [
                [InlineKeyboardButton("üíé Premium - 139‚ÇΩ/–º–µ—Å—è—Ü", callback_data="pay_premium_month")],
                [InlineKeyboardButton("üíé Premium –ì–æ–¥ - 990‚ÇΩ/–≥–æ–¥", callback_data="pay_premium_year")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_main")]
            ]
        
            text = f"""üí≥ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π</b>

    <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {status_text}

    üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:</b>

    üíé <b>Premium (1 –º–µ—Å—è—Ü)</b> - 139‚ÇΩ
    ‚Ä¢ ‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    ‚Ä¢ üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    

    üíé <b>Premium (1 –≥–æ–¥)</b> - 990‚ÇΩ
    ‚Ä¢ –í—Å—ë —Ç–æ –∂–µ + —ç–∫–æ–Ω–æ–º–∏—è 20%
    ‚Ä¢ –ì–æ–¥ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏

    üí° <b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!</b>"""
        
            return text, InlineKeyboardMarkup(keyboard)
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_subscription_menu: {e}")
            error_text = """üí≥ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π</b>

    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏

    üíé <b>Premium (1 –º–µ—Å—è—Ü)</b> - 139‚ÇΩ
    ‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    üíé <b>Premium (1 –≥–æ–¥)</b> - 990‚ÇΩ  
    ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è 20%"""
        
            keyboard = [
                [InlineKeyboardButton("üíé Premium - 139‚ÇΩ/–º–µ—Å—è—Ü", callback_data="pay_premium_month")],
                [InlineKeyboardButton("üíé Premium –ì–æ–¥ - 990‚ÇΩ/–≥–æ–¥", callback_data="pay_premium_year")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_main")]
            ]
        
            return error_text, InlineKeyboardMarkup(keyboard)

    def get_consultation_menu(self, user_id):
        """–ú–µ–Ω—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
            cursor = self.sub_manager.conn.cursor()
            
            cursor.execute("SELECT subscription_type FROM subscriptions WHERE user_id = ?", (user_id,))
            result = cursor.fetchone()
            sub_type = result[0] if result else 'free'
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
            today = datetime.now().strftime('%Y-%m-%d')
            cursor.execute(
                "SELECT message_count FROM message_stats WHERE user_id = ? AND date = ?", 
                (user_id, today)
            )
            result = cursor.fetchone()
            messages_today = result[0] if result else 0
            
            if sub_type == 'premium':
                status_info = "üíé Premium - –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
                advice = "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º!"
            else:
                daily_limit = 5
                status_info = f"üÜì {sub_type.capitalize()} - {messages_today}/{daily_limit} —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è"
                advice = "üí° –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ Premium –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!"
            
            text = f"""üí¨ <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å AI-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º</b>

    {status_info}

    ü§ñ <b>–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å:</b>
    ‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏
    ‚Ä¢ –û—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–µ–π  
    ‚Ä¢ –°—Ç—Ä–µ—Å—Å–æ–º –∏ —Ç—Ä–µ–≤–æ–≥–æ–π
    ‚Ä¢ –°–∞–º–æ–æ—Ü–µ–Ω–∫–æ–π –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π
    ‚Ä¢ –ü–æ–∏—Å–∫–æ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ö–Ω–∏–∫

    üìù <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
    1. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –≤–æ–ø—Ä–æ—Å
    2. –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ—ë –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π
    3. –ü—Ä–µ–¥–ª–æ–∂—É –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ —Å–æ–≤–µ—Ç—ã

    {advice}

    <b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç!</b> ‚úçÔ∏è"""
            
            keyboard = [
                [InlineKeyboardButton("üíé Premium –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")],
                [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_main")]
            ]
            
            return text, InlineKeyboardMarkup(keyboard)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_consultation_menu: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é", self.get_back_to_menu_button()        