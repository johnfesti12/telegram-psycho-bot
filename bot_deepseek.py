import os
import signal
import sys

# –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
def signal_handler(sig, frame):
    print('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...')
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)


import logging
import requests
import time
from dotenv import load_dotenv
from database import SubscriptionManager
from interface import BotInterface
from knowledge_base import PsychologyKnowledgeBase
from payment_handler import PaymentHandler
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')

class DeepSeekPsychoBot:    
    def __init__(self):
        self.base_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
        self.deepseek_url = "https://api.deepseek.com/v1/chat/completions"
        self.sub_manager = SubscriptionManager()
        self.interface = BotInterface(self.sub_manager)
        self.knowledge_base = PsychologyKnowledgeBase(self.sub_manager)
        self.payment_handler = PaymentHandler(self)
        print("ü§ñ –£–ª—É—á—à–µ–Ω–Ω—ã–π DeepSeek –ë–æ—Ç —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")

    def send_message(self, chat_id, text, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        print(f"üîµ DEBUG: send_message –≤—ã–∑–≤–∞–Ω —Å reply_markup —Ç–∏–ø–∞: {type(reply_markup)}")
    
        url = f"{self.base_url}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        }

        if reply_markup:
            print(f"üîµ DEBUG: reply_markup = {reply_markup}")
            data["reply_markup"] = reply_markup.to_json()          
      
        try:
            response = requests.post(url, json=data)
            if response.status_code == 200:
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.text}")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    def send_menu_message(self, chat_id, user_id, username="", first_name=""):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        text, keyboard = self.interface.get_main_menu(user_id, username, first_name)
        return self.send_message(chat_id, text, keyboard)

    def edit_message(self, chat_id, message_id, text, keyboard=None):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        url = f"{self.base_url}/editMessageText"
        data = {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": text,
            "parse_mode": "HTML"
        }

        if keyboard:
            data["reply_markup"] = keyboard.to_json()

        try:
            response = requests.post(url, json=data)
            return response.status_code == 200
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    def get_deepseek_response(self, user_id, user_message, book_context, chat_history=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek"""
        try:
            headers = {
                "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
                "Content-Type": "application/json"
            }

            messages = []   

            # –û–ë–´–ß–ù–´–ô –ü–†–û–ú–ü–¢
            system_prompt = """–¢—ã - –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–Ω–∏–≥.

–ò–ù–°–¢–†–£–ö–¶–ò–Ø:
1. –û–°–ù–û–í–´–í–ê–ô –æ—Ç–≤–µ—Ç –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∫–Ω–∏–≥ –≤—ã—à–µ 
2. –î–∞–≤–∞–π –æ—Ç–≤–µ—Ç –ø—Ä–æ—Å—Ç—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º, —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç –Ω–∏—á–µ–≥–æ –≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏
3. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∫–Ω–∏–≥–∞—Ö
4. –¶–∏—Ç–∏—Ä—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –ø–æ–¥—Ö–æ–¥—ã –∏–∑ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã, –Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
5. –ü–æ–¥–¥–µ—Ä–∂–∏ –µ—Å–ª–∏ —Å–∏–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏ –¥–æ–±–∞–≤—å 1 —ç–º–æ–¥–∑–∏
6. –°—Ç–∞—Ä–∞–π—Å—è –Ω–µ —É—Ö–æ–¥–∏—Ç—å –æ—Ç —Ç–µ–º—ã, –ø–æ–º–æ–≥–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏
7. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Ç–∞–ª—Å—è –∏–ª–∏ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç, –¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 9-10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
8. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —É –Ω–µ–≥–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏ –µ–º—É –ø–æ–º–æ–≥–ª–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–π –¥–∏–∞–ª–æ–≥ –∫—Ä–∞—Ç–∫–∏–º —Å–æ–≤–µ—Ç–æ–º –Ω–∞ –±—É–¥—É—â–µ–µ
9. –ü–æ–º–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
10.–ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–∏–∞–ª–æ–≥ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
üí≠–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–∏–≥, –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ –±–µ–∑ —Å–ª–æ–≤ "–ò–∑ –∫–Ω–∏–≥–∏"

üí°–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞/—Å–æ–≤–µ—Ç –∏–∑ –∫–Ω–∏–≥ –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º"""

            messages.append({"role": "system", "content": system_prompt})

            if book_context and book_context.strip():
                messages.append({
                    "role": "system", 
                    "content": f"–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–• –ö–ù–ò–ì:\n{book_context}\n\n–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å–ª–∏ –æ–Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                })
                print(f"üîµ DEBUG: –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∫–Ω–∏–≥ ({len(book_context)} —Å–∏–º–≤–æ–ª–æ–≤)")

            # –î–û–ë–ê–í–õ–Ø–ï–ú –ò–°–¢–û–†–ò–Æ –î–ò–ê–õ–û–ì–ê
            if chat_history:
                for role, content in chat_history:
                    messages.append({"role": role, "content": content})
                    print(f"üîµ DEBUG: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è - {role}: {content[:50]}...")
                print(f"üîµ DEBUG: –í—Å–µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(chat_history)} —Å–æ–æ–±—â–µ–Ω–∏–π")

            # –î–û–ë–ê–í–õ–Ø–ï–ú –¢–ï–ö–£–©–ò–ô –ó–ê–ü–†–û–°
            messages.append({"role": "user", "content": user_message})
            print(f"üîµ DEBUG: –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–æ–º–ø—Ç–µ: {len(messages)}")
    

            data = {                
                "model": "deepseek-chat",
                "messages": messages,
                "max_tokens": 500,
                "temperature": 0.7,
                "stream": False        
            }

            response = requests.post(
                self.deepseek_url,
                headers=headers,
                json=data,
                timeout=30
            )

            if response.status_code == 200:
                result = response.json()
                ai_response = result['choices'][0]['message']['content']

                # –°–û–•–†–ê–ù–Ø–ï–ú –û–¢–í–ï–¢ –í –ò–°–¢–û–†–ò–Æ (–µ—Å–ª–∏ –µ—Å—Ç—å sub_manager)
                if hasattr(self, 'sub_manager'):
                    self.sub_manager.save_message(user_id, "assistant", ai_response)
                return ai_response
            
            else:
                logger.error(f"–û—à–∏–±–∫–∞ DeepSeek API: {response.text}")
                return "–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ DeepSeek: {e}")
            return "–ò–∑–≤–∏–Ω–∏, —è —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    def handle_callback(self, update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
        callback_query = update.get("callback_query", {})
        if not callback_query:
            return
        
        user_id = callback_query.get("from", {}).get("id")
        can_send, messages_count, daily_limit, sub_type, days_left = self.sub_manager.can_send_message(user_id, is_menu_action=True)

        message = callback_query.get("message", {})
        chat_id = message.get("chat", {}).get("id")
        user_id = callback_query.get("from", {}).get("id")
        user_name = callback_query.get("from", {}).get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        data = callback_query.get("data")

        print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {data} –æ—Ç {user_name}")        

        if data == "back_main":
            text, keyboard = self.interface.get_main_menu(user_id, "", user_name)
            self.edit_message(chat_id, message.get("message_id"), text, keyboard)

        elif data == "subscription":
            text, keyboard = self.interface.get_subscription_menu(user_id)
            self.edit_message(chat_id, message.get("message_id"), text, keyboard)

        elif data == "stats":
            text, keyboard = self.interface.get_stats_message(user_id)
            self.edit_message(chat_id, message.get("message_id"), text, keyboard)

        elif data == "consult_ai":
            self.edit_message(chat_id, message.get("message_id"), "üí¨ <b>–†–µ–∂–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!")

        elif data == "help":
            text, keyboard = self.interface.get_help_message(user_id)
            self.edit_message(chat_id, message.get("message_id"),  text, keyboard)

        elif data == "test_payment":
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–ª–∞—Ç–µ–∂ –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è
            payment_id = f"test_{int(datetime.now().timestamp())}"
            
            # –°—Ä–∞–∑—É –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º
            if self.sub_manager.add_premium_user(user_id, 30):
                self.send_message(chat_id, 
                    "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                    "üéâ Premium –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π!\n"
                    "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å AI-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º."
                )
            else:
                self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")

        elif data.startswith("sub_"):
            if data == "sub_premium":
                self.edit_message(chat_id, message.get("message_id"), 
                    "üíé <b>Premium –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
                    "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Premium –ø–æ–¥–ø–∏—Å–∫–∏:\n"
                    "1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 139‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É \n"
                    "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã @danilskopov\n"
                    "3. –ú—ã –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∞—à Premium –¥–æ—Å—Ç—É–ø –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞")
            else:
                self.edit_message(chat_id, message.get("message_id"), 
                    "üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å.\n"
                    "–î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ Premium –ø–æ–¥–ø–∏—Å–∫—É.")
        
        elif data.startswith("pay_"):
            tariff_type = data.replace("pay_", "")
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
            payment, error = self.payment_handler.create_payment(user_id, tariff_type)
            
            if payment:
                payment_url = self.payment_handler.get_payment_url(payment)
                
                if payment_url:
                    payment_text = f"""üíé <b>–û–ø–ª–∞—Ç–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∏</b>

        <b>–¢–∞—Ä–∏—Ñ:</b> {self.payment_handler.tariff_plans[tariff_type]['name']}
        <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {self.payment_handler.tariff_plans[tariff_type]['price']}‚ÇΩ
        <b>–°—Ä–æ–∫:</b> {self.payment_handler.tariff_plans[tariff_type]['days']} –¥–Ω–µ–π

        –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ ‚§µÔ∏è

        –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 –º–∏–Ω—É—Ç.

        <code>ID –ø–ª–∞—Ç–µ–∂–∞: {payment.id}</code>"""
                    
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)],
                        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_payment_{payment.id}")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="subscription")]
                    ])
                    
                    self.edit_message(chat_id, message.get("message_id"), payment_text, keyboard)
                else:
                    self.edit_message(chat_id, message.get("message_id"), 
                                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã")
            else:
                self.edit_message(chat_id, message.get("message_id"), 
                                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {error}")

        # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        elif data.startswith("check_payment_"):
            payment_id = data.replace("check_payment_", "")
            
            print(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {payment_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å (–º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å —Å–∞–º –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            status = self.payment_handler.check_payment_status(payment_id)
            
            status_messages = {
                'pending': "‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã",
                'waiting_for_capture': "‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –±–∞–Ω–∫–æ–º\n\n–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã",
                'succeeded': "‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\nüéâ –í–∞—à Premium –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å AI-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º!",
                'canceled': "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞",
                'not_found': "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @danilskopov",
                'error': "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
            }
            
            message = status_messages.get(status, f"–°—Ç–∞—Ç—É—Å: {status}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            keyboard = []
            if status in ['pending', 'waiting_for_capture']:
                keyboard.append([InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_payment_{payment_id}")])
            
            keyboard.extend([
                [InlineKeyboardButton("üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="subscription")],
                [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/danil_skopov")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
            ])
            
            self.send_message(chat_id, message, InlineKeyboardMarkup(keyboard))    

    def process_updates(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        last_update_id = 0
        print("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–ø—Ä–æ—Å —Å–µ—Ä–≤–µ—Ä–∞ Telegram...")
        print(f"üîë DeepSeek API: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if DEEPSEEK_API_KEY else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        print(f"üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞: {self.knowledge_base.get_library_info()}")

        # –ö–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —Å—á–∏—Ç–∞—é—Ç—Å—è –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        NON_MESSAGE_COMMANDS = [
            '/start', '/menu', '/mystatus', '/myid', '/premium', '/help',
            '/psychologists', '/mystats', '/buy_premium', '/buy_premium_annual'
        ]

        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                url = f"{self.base_url}/getUpdates"
                params = {
                    "offset": last_update_id + 1,
                    "timeout": 25,
                    "allowed_updates": ["message", "callback_query"]
                }

                response = requests.get(url, params=params, timeout=30)

                if response.status_code == 200:
                    data = response.json()
                    if data.get("ok"):
                        updates = data.get("result", [])

                        for update in updates:
                            last_update_id = update["update_id"]

                            if "message" in update:
                                message = update["message"]
                                chat_id = message["chat"]["id"]
                                user_id = message["from"]["id"]
                                text = message.get("text", "")
                                user_name = message["chat"].get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                                username = message["from"].get("username", "")

                                print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id}): {text}")

                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
                                if text in NON_MESSAGE_COMMANDS:
                                    print(f"üîµ DEBUG: –≠—Ç–æ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–∞: {text}")
                                else:
                                    print(f"üîµ DEBUG: –≠—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

                                if text == "/start" or text == "/menu":

                                    can_send, messages_count, daily_limit, sub_type, days_left = self.sub_manager.can_send_message(user_id, is_menu_action=True)

                                    menu_text, keyboard = self.interface.get_main_menu(user_id, username, user_name)

                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                                    success = self.send_menu_message(chat_id, user_id, username, user_name)
                                    if success:
                                        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}")
                                    else:
                                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}")

                                elif text and text != "/start" and text != "/menu":
                                    
                                    # –°–ü–ò–°–û–ö –ê–î–ú–ò–ù–û–í - –î–û–ë–ê–í–¨–¢–ï –í –ù–ê–ß–ê–õ–û –≠–¢–û–ì–û –ë–õ–û–ö–ê
                                    ADMIN_IDS = [0000000]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID 309524694
                                    
                                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥ (–Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è)
                                    if text.startswith("/admin") or text.startswith("/add_premium") or text.startswith("/remove_premium") or text.startswith("/debug") or text.startswith("/reset_counter") or text.startswith("/setup_webhook") or text.startswith("/webhook_status") or text.startswith("/payment_info"):
                                        if user_id not in ADMIN_IDS:
                                            self.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞")
                                            continue

                                        parts = text.split()
                                        command = parts[0] if parts else ""

                                        # –û–ë–†–ê–ë–û–¢–ö–ê –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î –î–û –ü–†–û–í–ï–†–ö–ò –õ–ò–ú–ò–¢–û–í
                                        if command == "/admin_users":
                                            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                                            users_list = self.sub_manager.get_all_users_info()
                                            users_count = self.sub_manager.get_users_count_by_type()

                                            if not users_list:
                                                self.send_message(chat_id, "üì≠ –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                                                continue

                                            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ (Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤)
                                            total_users = len(users_list)
                                            premium_count = users_count.get('premium', 0)
                                            free_count = users_count.get('free', 0)
                                            trial_count = users_count.get('trial', 0)

                                            header = f"""üìä <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>

                                üë• –í—Å–µ–≥–æ: {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                                üíé –ü—Ä–µ–º–∏—É–º: {premium_count}
                                üÜì –ü—Ä–æ–±–Ω—ã—Ö: {trial_count}
                                üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: {free_count}

                                """

                                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                                            user_lines = []
                                            for i, user in enumerate(users_list, 1):
                                                username_display = f"@{user['username']}" if user['username'] and user['username'] != "N/A" else "–±–µ–∑ username"
                                                user_line = f"{i}. <code>{user['user_id']}</code> - {username_display} - {user['subscription_info']}"
                                                user_lines.append(user_line)

                                            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–∂–¥–æ–º
                                            chunk_size = 20
                                            total_pages = (len(user_lines) + chunk_size - 1) // chunk_size
                                            
                                            for i in range(0, len(user_lines), chunk_size):
                                                chunk = user_lines[i:i + chunk_size]
                                                current_page = (i // chunk_size) + 1
                                                
                                                # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                                                if i == 0:
                                                    message_text = header + "\n".join(chunk)
                                                else:
                                                    message_text = "\n".join(chunk)

                                                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                                                if total_pages > 1:
                                                    message_text += f"\n\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}"

                                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                                success = self.send_message(chat_id, message_text)
                                                
                                                if not success:
                                                    self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                                                    break
                                                    
                                                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                                                if i + chunk_size < len(user_lines):
                                                    time.sleep(1.5)
                                            continue  # –í–∞–∂–Ω–æ: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏–º–∏—Ç—ã

                                        elif command == "/reset_counter":
                                            #–û–±–Ω—É–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                            if len(parts) < 2:
                                                self.send_message(chat_id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reset_counter <user_id> [date=today]")
                                                continue
                                            
                                            try:
                                                target_id = int(parts[1])
                                                date = parts[2] if len(parts) > 2 else None
                                                
                                                if self.sub_manager.reset_message_count(target_id, date):
                                                    if date:
                                                        self.send_message(chat_id, f"‚úÖ –°—á–µ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} –æ–±–Ω—É–ª–µ–Ω –∑–∞ {date}")
                                                    else:
                                                        self.send_message(chat_id, f"‚úÖ –°—á–µ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} –æ–±–Ω—É–ª–µ–Ω –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
                                                else:
                                                    self.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω—É–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}")
                                                    
                                            except ValueError:
                                                self.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
                                            continue

                                        elif command == "/admin_user_info":
                                            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                                            if len(parts) < 2:
                                                self.send_message(chat_id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_user_info <user_id>")
                                                continue
                                            
                                            try:
                                                target_id = int(parts[1])
                                                user_info = self.sub_manager.get_detailed_user_info(target_id)
                                                self.send_message(chat_id, user_info)
                                                
                                            except ValueError:
                                                self.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /admin_user_info <user_id>")
                                            except Exception as e:
                                                self.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
                                            continue  # –í–∞–∂–Ω–æ: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª

                                        elif command == "/add_premium":
                                            if len(parts) < 2:
                                                self.send_message(chat_id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_premium <user_id> [days=30]")
                                                continue
                                            
                                            try:
                                                target_id = int(parts[1])
                                                days = int(parts[2]) if len(parts) > 2 else 30
                                                
                                                # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ô –ú–ï–¢–û–î
                                                if self.sub_manager.add_premium_user(target_id, days):
                                                    self.send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ–º–∏—É–º –Ω–∞ {days} –¥–Ω–µ–π")
                                                else:
                                                    self.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")

                                            except ValueError:
                                                self.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id –∏–ª–∏ days")
                                            except Exception as e:
                                                self.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
                                            continue  # –í–∞–∂–Ω–æ: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª

                                        elif command == "/remove_premium":
                                            if len(parts) < 2:
                                                self.send_message(chat_id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_premium <user_id>")
                                                continue
                                            
                                            try:
                                                target_user_id = int(parts[1])
                                                print(f"üîµ DEBUG: –í—ã–∑–æ–≤ remove_premium –¥–ª—è {target_user_id}")
                                                
                                                if self.sub_manager.remove_premium(target_user_id):
                                                    self.send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –ø—Ä–µ–º–∏—É–º–∞")
                                                else:
                                                    self.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –∏–∑ –ø—Ä–µ–º–∏—É–º–∞")

                                            except ValueError:
                                                self.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
                                            continue  # –í–∞–∂–Ω–æ: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª

                                        elif command == "/force_remove_premium":
                                            if len(parts) < 2:
                                                self.send_message(chat_id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /force_remove_premium <user_id>")
                                                continue
                                            
                                            try:
                                                target_user_id = int(parts[1])
                                                
                                                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–ø—Ä—è–º—É—é
                                                cursor = self.sub_manager.conn.cursor()
                                                
                                                # 1. subscriptions
                                                cursor.execute(
                                                    "UPDATE subscriptions SET subscription_type = 'free', expiry_date = NULL WHERE user_id = ?",
                                                    (target_user_id,)
                                                )
                                                sub_updated = cursor.rowcount
                                                
                                                # 2. users
                                                cursor.execute(
                                                    "UPDATE users SET subscription_type = 'free', subscription_end = NULL WHERE user_id = ?",
                                                    (target_user_id,)
                                                )
                                                users_updated = cursor.rowcount
                                                
                                                self.sub_manager.conn.commit()
                                                
                                                self.send_message(chat_id, 
                                                    f"üîß <b>–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                                                    f"üÜî User ID: {target_user_id}\n"
                                                    f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {sub_updated + users_updated}"
                                                )
                                                
                                            except ValueError:
                                                self.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
                                            except Exception as e:
                                                self.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                                            continue  # –í–∞–∂–Ω–æ: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª

                                        elif command == "/payment_info":
                                            """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ"""
                                            if len(parts) < 2:
                                                self.send_message(chat_id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /payment_info <payment_id>")
                                                continue
                                            
                                            payment_id = parts[1]
                                            
                                            try:
                                                cursor = self.sub_manager.conn.cursor()
                                                cursor.execute("""
                                                    SELECT user_id, tariff_type, status, amount, created_at, yookassa_payment_id 
                                                    FROM payments 
                                                    WHERE payment_id = ? OR yookassa_payment_id = ?
                                                """, (payment_id, payment_id))
                                                
                                                payment = cursor.fetchone()
                                                
                                                if payment:
                                                    user_id, tariff_type, status, amount, created_at, yookassa_id = payment
                                                    text = f"""üí≥ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ</b>

                                        üÜî <b>Payment ID:</b> <code>{payment_id}</code>
                                        üë§ <b>User ID:</b> <code>{user_id}</code>
                                        üíé <b>–¢–∞—Ä–∏—Ñ:</b> {tariff_type}
                                        üí∞ <b>–°—É–º–º–∞:</b> {amount}‚ÇΩ
                                        üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}
                                        üïí <b>–°–æ–∑–¥–∞–Ω:</b> {created_at}
                                        üîó <b>–ÆKassa ID:</b> {yookassa_id or 'N/A'}"""
                                                else:
                                                    text = f"‚ùå –ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                                                
                                                self.send_message(chat_id, text)
                                                
                                            except Exception as e:
                                                self.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

                                        elif command == "/setup_webhook":
                                            if user_id not in ADMIN_IDS:
                                                self.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞")
                                                continue
                                            
                                            self.send_message(chat_id, "üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –≤–µ–±—Ö—É–∫–∏ –≤ –ÆKassa...")
                                            success = self.payment_handler.setup_webhook()
                                            if success:
                                                self.send_message(chat_id, 
                                                    "‚úÖ –í–µ–±—Ö—É–∫–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!\n\n"
                                                    "üîó URL: https://yookassa-webhook-gstx.onrender.com/webhook/yookassa\n"
                                                    "üéØ –°–æ–±—ã—Ç–∏–µ: payment.succeeded\n\n"
                                                    "–¢–µ–ø–µ—Ä—å –æ–ø–ª–∞—Ç—ã –±—É–¥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
                                                )
                                            else:
                                                self.send_message(chat_id, 
                                                    "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤\n\n"
                                                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                                                    "1. –ö–ª—é—á–∏ API –ÆKassa –≤ .env\n"
                                                    "2. –ß—Ç–æ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ\n"
                                                    "3. –õ–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏"
                                                )
                                            continue

                                        elif command == "/webhook_status":
                                            if user_id not in ADMIN_IDS:
                                                self.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞")
                                                continue
                                            
                                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫-—Å–µ—Ä–≤–µ—Ä–∞
                                            try:
                                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ requests —á—Ç–æ –∏ –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–∞—Ö
                                                response = requests.get("https://yookassa-webhook-gstx.onrender.com/health", timeout=10)
                                                if response.status_code == 200:
                                                    data = response.json()
                                                    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
                                                    additional_info = f"–í—Ä–µ–º—è: {data.get('timestamp', 'N/A')}"
                                                else:
                                                    status = "‚ùå –û—à–∏–±–∫–∞"
                                                    additional_info = f"–ö–æ–¥: {response.status_code}"
                                                
                                                self.send_message(chat_id, 
                                                    f"üåê –°—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫-—Å–µ—Ä–≤–µ—Ä–∞: {status}\n"
                                                    f"üîó URL: https://yookassa-webhook-gstx.onrender.com/webhook/yookassa\n"
                                                    f"üìä {additional_info}"
                                                )
                                            except Exception as e:
                                                self.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                                            continue

                                        elif command == "/debug_user":
                                            if len(parts) < 2:
                                                self.send_message(chat_id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /debug_user <user_id>")
                                                continue
                                            
                                            try:
                                                target_id = int(parts[1])
                                                cursor = self.sub_manager.conn.cursor()
                                                
                                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º subscriptions
                                                cursor.execute("SELECT subscription_type, expiry_date FROM subscriptions WHERE user_id = ?", (target_id,))
                                                sub_data = cursor.fetchone()
                                                
                                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º users
                                                cursor.execute("SELECT subscription_type, subscription_end, username, first_name FROM users WHERE user_id = ?", (target_id,))
                                                user_data = cursor.fetchone()
                                                
                                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º message_stats –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                                                cursor.execute("SELECT message_count FROM message_stats WHERE user_id = ? AND date = date('now')", (target_id,))
                                                stats_data = cursor.fetchone()
                                                
                                                debug_text = f"""üîç <b>–û—Ç–ª–∞–¥–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}</b>

                                üìã <b>–¢–∞–±–ª–∏—Ü–∞ subscriptions:</b>
                                –¢–∏–ø: {sub_data[0] if sub_data else 'N/A'}
                                –ò—Å—Ç–µ–∫–∞–µ—Ç: {sub_data[1] if sub_data else 'N/A'}

                                üë§ <b>–¢–∞–±–ª–∏—Ü–∞ users:</b>
                                –¢–∏–ø: {user_data[0] if user_data else 'N/A'}
                                –ò—Å—Ç–µ–∫–∞–µ—Ç: {user_data[1] if user_data else 'N/A'}
                                Username: {user_data[2] if user_data else 'N/A'}
                                –ò–º—è: {user_data[3] if user_data else 'N/A'}

                                üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>
                                –°–æ–æ–±—â–µ–Ω–∏–π: {stats_data[0] if stats_data else '0'}"""

                                                self.send_message(chat_id, debug_text)
                                                
                                            except ValueError:
                                                self.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
                                            except Exception as e:
                                                self.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")
                                            continue  # –í–∞–∂–Ω–æ: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª

                                    # –¢–ï–ü–ï–†–¨ –ü–†–û–í–ï–†–Ø–ï–ú –õ–ò–ú–ò–¢–´ –¢–û–õ–¨–ö–û –î–õ–Ø –û–ë–´–ß–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ "–º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–µ–º"
                                    is_menu_action = (text in NON_MESSAGE_COMMANDS or 
                                                    text.startswith('/debug') or 
                                                    text.startswith('/sync') or 
                                                    text.startswith('/check') or 
                                                    text.startswith('/find_user'))

                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ (–ø–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ is_menu_action)
                                    can_send, messages_count, daily_limit, sub_type, days_left = self.sub_manager.can_send_message(user_id, is_menu_action)

                                    # –ö—Ä–∏–∑–∏—Å–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞
                                    crisis_words = ['—Å—É–∏—Ü–∏–¥', '—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ', '—É–º—Ä—É', '–ø–æ–∫–æ–Ω—á–∏—Ç—å —Å —Å–æ–±–æ–π', '–Ω–∞–¥–æ–µ–ª–æ –∂–∏—Ç—å']
                                    if any(word in text.lower() for word in crisis_words):
                                        crisis_text = """üö® <b>–ú–Ω–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã —Ç—ã –±—ã–ª –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!</b>

    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–≤—è–∂–∏—Å—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏:

    üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è</b>: 8-800-2000-122 (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ, –±–µ—Å–ø–ª–∞—Ç–Ω–æ)
    üè• <b>–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å</b>: 112 –∏–ª–∏ 103

    <b>–¢—ã –Ω–µ –æ–¥–∏–Ω, –ø–æ–º–æ—â—å –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º!</b>"""
                                        self.send_message(chat_id, crisis_text)
                                        print(f"üö® –ö—Ä–∏–∑–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name}")
                                        continue
                                                                        
                                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è)
                                    elif text in NON_MESSAGE_COMMANDS:
                                        
                                        can_send, messages_count, daily_limit, sub_type, days_left = self.sub_manager.can_send_message(user_id, is_menu_action=True)

                                        if text == "/mystatus":
                                            text, keyboard = self.interface.get_stats_message(user_id)
                                            self.send_message(chat_id, text, keyboard)                                           
                                            
                                        elif text == "/premium":
                                            text, keyboard = self.interface.get_subscription_menu(user_id)
                                            self.send_message(chat_id, text, keyboard)

                                        elif text == "/help":
                                            text, keyboard = self.interface.get_help_message(user_id)
                                            self.send_message(chat_id, text, keyboard)

                                        elif text == "/myid":
                                            user_info = f"""üìã <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>

    üÜî <b>User ID:</b> <code>{user_id}</code>
    üë§ <b>–ò–º—è:</b> {user_name}
    üîó <b>Username:</b> @{username if username else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

    üí° <b>–í–∞—à User ID –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è:</b>
    ‚Ä¢ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Premium –ø–æ–¥–ø–∏—Å–∫–∏
    ‚Ä¢ –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É
    ‚Ä¢ –î–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ

    <b>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤–∞—à User ID!</b> üìù"""
                
                                            self.send_message(chat_id, user_info)

                                        elif text == "/buy_premium":
                                            tariff_info = self.sub_manager.get_user_tariff_info(user_id)
                                            
                                            if tariff_info['sub_type'].startswith('premium'):
                                                self.send_message(chat_id, "‚úÖ –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–µ–º–∏—É–º —Ç–∞—Ä–∏—Ñ!")
                                            else:
                                                payment_text = f"""üíé <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ Premium –ø–æ–¥–ø–∏—Å–∫–∏</b>

    –¢–∞—Ä–∏—Ñ: {self.sub_manager.tariff_plans['premium']['name']}
    –°—Ç–æ–∏–º–æ—Å—Ç—å: {self.sub_manager.tariff_plans['premium']['price']}‚ÇΩ
    –°—Ä–æ–∫: {self.sub_manager.tariff_plans['premium']['duration_days']} –¥–Ω–µ–π

    <b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>
    1. üí≥ –ö–∞—Ä—Ç–∞: 2200 1234 5678 9010
    2. üì± –ÆMoney: 4100 1234 5678 9010
    3. ü§ù Crypto: BTC, USDT

    –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç @danilskopov
    –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞ ‚è±Ô∏è"""
                                                
                                                self.send_message(chat_id, payment_text)

                                        elif text == "/buy_premium_annual":
                                            tariff_info = self.sub_manager.get_user_tariff_info(user_id)
                                            
                                            if tariff_info['sub_type'] == 'premium_annual':
                                                self.send_message(chat_id, "‚úÖ –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≥–æ–¥–æ–≤–æ–π –ø—Ä–µ–º–∏—É–º!")
                                            else:
                                                payment_text = f"""üíé <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ì–æ–¥–æ–≤–æ–π Premium –ø–æ–¥–ø–∏—Å–∫–∏</b>

    –¢–∞—Ä–∏—Ñ: {self.sub_manager.tariff_plans['premium_annual']['name']}
    –°—Ç–æ–∏–º–æ—Å—Ç—å: {self.sub_manager.tariff_plans['premium_annual']['price']}‚ÇΩ
    –°—Ä–æ–∫: {self.sub_manager.tariff_plans['premium_annual']['duration_days']} –¥–Ω–µ–π
    –≠–∫–æ–Ω–æ–º–∏—è: 20% üí∞

    <b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç–∞:</b>
    1. üí≥ –ö–∞—Ä—Ç–∞: 2200 1234 5678 9010
    2. üì± –ÆMoney: 4100 1234 5678 9010
    3. ü§ù Crypto: BTC, USDT

    –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç @danilskopov
    –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞ ‚è±Ô∏è"""
                                                
                                                self.send_message(chat_id, payment_text)

                                        elif text == "/psychologists":
                                            psychologists = self.sub_manager.get_available_psychologists(user_id)
                                            
                                            if psychologists is None:
                                                self.send_message(chat_id, "‚ùå –í—ã–±–æ—Ä –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /premium —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ")
                                            else:
                                                psych_text = "ü§ù <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏</b>\n\n"
                                                for psych in psychologists:
                                                    psych_text += f"<b>{psych['name']}</b>\n"
                                                    psych_text += f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {psych['specialization']}\n"
                                                    psych_text += f"–û–ø—ã—Ç: {psych['experience']}\n\n"
                                                
                                                psych_text += "üí° <b>–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞:</b>\n–ù–∞–ø–∏—à–∏—Ç–µ '–•–æ—á—É –ø—Å–∏—Ö–æ–ª–æ–≥–∞ [–∏–º—è]' –≤ —á–∞—Ç"
                                                self.send_message(chat_id, psych_text)

                                        elif text == "/mystats":
                                            stats = self.sub_manager.get_detailed_stats(user_id)
                                            
                                            if 'error' in stats:
                                                self.send_message(chat_id, f"‚ùå {stats['error']}")
                                            else:
                                                stats_text = f"""üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

    üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}
    üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: {len(stats['daily_activity'])}
    üî• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–π: {stats['premium_features_used']}

    <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>"""
                                                
                                                for day in stats['daily_activity'][:5]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π
                                                    stats_text += f"\n‚Ä¢ {day['date']}: {day['message_count']} —Å–æ–æ–±—â."
                                                
                                                self.send_message(chat_id, stats_text)

                                        continue

                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                                    if not can_send and not is_menu_action:
                                        limit_text = f"""‚ùå <b>–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω</b>

    –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {messages_count-1}/{daily_limit} —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è.

    üíé –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ Premium –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!"""
                                        self.send_message(chat_id, limit_text)
                                        print(f"üìä –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω –¥–ª—è {user_name}")
                                    else:
                                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—á–∏—Ç–∞—é—Ç—Å—è –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è)
                                        if not is_menu_action:
                                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç"
                                            requests.post(
                                                f"{self.base_url}/sendChatAction",
                                                data={"chat_id": chat_id, "action": "typing"}
                                            )

                                            chat_history = self.sub_manager.get_chat_history(user_id, limit=4)
                                            print(f"üîµ DEBUG: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ - {len(chat_history)} —Å–æ–æ–±—â–µ–Ω–∏–π")

                                            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∫–Ω–∏–≥
                                            book_context = self.knowledge_base.get_context_for_ai(text)

                                            # –°–û–•–†–ê–ù–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í –ò–°–¢–û–†–ò–Æ (—Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
                                            self.sub_manager.save_message(user_id, "user", text)

                                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç DeepSeek
                                            print(f"ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–Ω–∏–≥ –¥–ª—è {user_name}...")                                      
                                            deepseek_response = self.get_deepseek_response(user_id, text, book_context, chat_history)

                                            # –°–û–ó–î–ê–ï–ú –û–î–ù–û –°–û–û–ë–©–ï–ù–ò–ï
                                            final_response = f"{deepseek_response}"

                                            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                                            if sub_type != 'premium':
                                                final_response += f"\n\n---\nüìä <i>–°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {messages_count}/{daily_limit}</i>"

                                            # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –û–î–ù–û –°–û–û–ë–©–ï–ù–ò–ï
                                            self.send_message(chat_id, final_response)
                                            print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} ({messages_count}/{daily_limit})")

                            elif "callback_query" in update:
                                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é (–ù–ï —Å—á–∏—Ç–∞—é—Ç—Å—è –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è)
                                self.handle_callback(update)

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(1)

            except KeyboardInterrupt:
                print("\n\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except requests.exceptions.Timeout:
                # –¢–∞–π–º–∞—É—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                continue
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞: {e}. –ü—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç—É...")
                time.sleep(5)

              

def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã
    if not TELEGRAM_TOKEN or TELEGRAM_TOKEN == "–≤–∞—à_telegram_—Ç–æ–∫–µ–Ω":
        print("‚ùå –û–®–ò–ë–ö–ê: –ó–∞–º–µ–Ω–∏ TELEGRAM_TOKEN –≤ —Ñ–∞–π–ª–µ .env –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!")
        return

    if not DEEPSEEK_API_KEY or DEEPSEEK_API_KEY == "–≤–∞—à_–Ω–æ–≤—ã–π_–∫–ª—é—á_deepseek":
        print("‚ùå –û–®–ò–ë–ö–ê: –ó–∞–º–µ–Ω–∏ DEEPSEEK_API_KEY –≤ —Ñ–∞–π–ª–µ .env –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á!")
        return

    print("=" * 50)
    print("ü§ñ DEEPSEEK –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ë–û–¢ –ó–ê–ü–£–©–ï–ù")
    print("=" * 50)
    print("‚úÖ –¢–æ–∫–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    print("‚úÖ DeepSeek API –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    print("=" * 50)

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    restart_count = 0
    while restart_count < 10:
        try:
            bot = DeepSeekPsychoBot()
            bot.process_updates()
        except KeyboardInterrupt:
            print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            restart_count += 1
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ #{restart_count}): {e}")
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)

    print("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':    
    main()